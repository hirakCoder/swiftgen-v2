{
    "files": [
        {
            "path": "Sources/App.swift",
            "content": "import SwiftUI\n\n@main\nstruct TimerApp: App {\n    var body: some Scene {\n        WindowGroup {\n            ContentView()\n        }\n    }\n}"
        },
        {
            "path": "Sources/ContentView.swift",
            "content": "import SwiftUI\n\nstruct ContentView: View {\n    @StateObject private var timerModel = TimerModel()\n    \n    var body: some View {\n        VStack(spacing: 20) {\n            Text(\"Timer: \\(formattedTime)\")\n                .font(.largeTitle)\n                .padding()\n            \n            HStack(spacing: 20) {\n                Button(action: {\n                    timerModel.startTimer()\n                }) {\n                    Text(\"Start\")\n                        .font(.title)\n                        .foregroundColor(.white)\n                        .padding()\n                        .background(Color.green)\n                        .cornerRadius(10)\n                }\n                .disabled(timerModel.isRunning)\n                \n                Button(action: {\n                    timerModel.stopTimer()\n                }) {\n                    Text(\"Stop\")\n                        .font(.title)\n                        .foregroundColor(.white)\n                        .padding()\n                        .background(Color.red)\n                        .cornerRadius(10)\n                }\n                .disabled(!timerModel.isRunning)\n                \n                Button(action: {\n                    timerModel.resetTimer()\n                }) {\n                    Text(\"Reset\")\n                        .font(.title)\n                        .foregroundColor(.white)\n                        .padding()\n                        .background(Color.gray)\n                        .cornerRadius(10)\n                }\n            }\n            \n            Spacer()\n        }\n        .padding()\n    }\n    \n    private var formattedTime: String {\n        let minutes = timerModel.secondsElapsed / 60\n        let seconds = timerModel.secondsElapsed % 60\n        return String(format: \"%02d:%02d\", minutes, seconds)\n    }\n}\n\nclass TimerModel: ObservableObject {\n    @Published var secondsElapsed = 0\n    @Published var isRunning = false\n    private var timer: Timer?\n    \n    func startTimer() {\n        guard !isRunning else { return }\n        isRunning = true\n        timer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { [weak self] _ in\n            self?.secondsElapsed += 1\n        }\n    }\n    \n    func stopTimer() {\n        isRunning = false\n        timer?.invalidate()\n        timer = nil\n    }\n    \n    func resetTimer() {\n        stopTimer()\n        secondsElapsed = 0\n    }\n    \n    deinit {\n        timer?.invalidate()\n    }\n}\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}"
        }
    ]
}